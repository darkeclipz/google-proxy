@page "/"
@inject IJSRuntime JSRuntime

<div class="header" @onclick="Clear">
    <div>
        <img src="/logo.png" class="logo" />
    </div>
    <h1>gproxy</h1>
</div>

<div class="search">
    <input id="search" type="text" 
        placeholder="What are you looking for?" 
        value="@Query"
        @onchange="async (args) => await OnSearchChangeAsync(args)"/>
</div>

@if(!HasResults && !IsSearching)
{
    <div class="info">
        <div>
            <h2>Search on Google while hiding your device and/or location.</h2>
            <p>
                Your search query is used to retrieve the Google search results on the server.
                The results are then displayed here. Your device doesn't make a request to
                the servers of Google, but we do it instead. Enjoy privacy while using Google.
            </p>
        </div>
        <div class="info-icon">
            <span class="oi oi-eye" />
        </div>
    </div>
    
}
else if(IsSearching)
{
    <div class="searching fade-in">
        Searching ...
    </div>
}
else 
{
    <h2>@Results.Count() Results</h2>
    foreach(var result in Results)
    {
        <SearchResult Uri="@result" />
    }
}

@code {
    private IEnumerable<Uri> Results { get; set; }
    private bool HasResults { get => Results != null; }
    private bool IsSearching { get; set; }
    private string Query { get; set; }

    protected override void OnAfterRender(bool firstRender) 
    {
        if(firstRender) 
        {
            JSRuntime.InvokeVoidAsync("focus");
        }
    }

    private async Task OnSearchChangeAsync(ChangeEventArgs args) 
    {
        IsSearching = true;
        Results = new List<Uri>();
        Query = args.Value.ToString();
        if(string.IsNullOrWhiteSpace(Query)) 
        {
            Clear();
        }
        else 
        {
            Results = await GoogleApi.GetSearchResultsAsync(Query);
        }
        IsSearching = false;
    }

    private void Clear() 
    {
        Results = null;
        Query = string.Empty;
        JSRuntime.InvokeVoidAsync("focus");
    }
}